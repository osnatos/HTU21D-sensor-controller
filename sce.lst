               .deffile adi_defs__0.asm
               .deffile ddi_defs__0.asm
               .deffile reg_defs__0.asm
               .deffile sce_defs__0.asm

               ; Number of supported tasks
               .define TASK_COUNT      1

               ; Resource-specified definitions, if any
               .define AUXIO_I2C_SCL           11
               .define AUXIO_I2C_SDA           10
               .define I2C_BASE_DELAY          9
               .define I2C_EXT_DELAY           4
               .define I2C_STRETCH_TIMEOUT_US  50
               .define I2C_WAIT_STRETCH_DELAY  5


               .segment begin "Framework"


               VectorTable:
0000 ---- 1408                         jsr         PowerUp
0001 ---- 040c                         jmp         TaskCtrlReqVector
0002 ---- 1408                         jsr         PowerUp
0003 ---- 042c                         jmp         AonRtcCh2Vector
0004 ---- 1408                         jsr         PowerUp
0005 ---- 0447                         jmp         Event0Vector
0006 ---- 1408                         jsr         PowerUp
0007 ---- 044d                         jmp         TaskAlertAckVector




               PowerUp:
                                       ; Deassert the power-down request
0008 ---- 4436                         iobclr      #0, [#IOP_WUC_PWRDWNREQ]

                                       ; Wait for it to take effect
0009 ---- 2437 /waitForPdAck:          iobtst      #0, [#IOP_WUC_PWRDWNACK]
000a ---- aefe                         biob1       /waitForPdAck

               FwEmptyFunc:            ; Done
000b ---- adb7                         rts




               TaskCtrlReqVector:
                                       ; Clear the vector flag
000c ---- 6442                         iobset      #0, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task ...
000d ---- 7000                         ld          R7, #0
               /loop:
                                           ; Save the task ID
000e ---- 7c6b                             st          R7, [#fwCtrlInt/taskId]

                                           ; Handle initialize request, if any
000f ---- 6872                             ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
0010 ---- 0068                             ld          R0, #pFwTaskInitializeFuncTable
0011 ---- 1425                             jsr         /handleReq

                                           ; Handle execute request, if any
0012 ---- 6873                             ld          R6, [#fwCtrlExt/bvTaskExecuteReq]
0013 ---- 0069                             ld          R0, #pFwTaskExecuteFuncTable
0014 ---- 1425                             jsr         /handleReq

                                           ; Handle terminate request, if any
0015 ---- 6874                             ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0016 ---- 006a                             ld          R0, #pFwTaskTerminateFuncTable
0017 ---- 1425                             jsr         /handleReq

                                           ; Move on to the next task
0018 ---- 786b                             ld          R7, [#fwCtrlInt/taskId]
0019 ---- f801                             add         R7, #1

001a ---- fa01                         cmp         R7, #TASK_COUNT
001b ---- bef2                         bneq        /loop

                                       ; Update which tasks are ...
001c ---- 7870                         ld          R7, [#fwCtrlExt/bvActiveTasks]
                                       ; ... currently active ...
001d ---- 6872                         ld          R6, [#fwCtrlExt/bvTaskInitializeReq]
001e ---- fd0e                         or          R7, R6
                                       ; ... and inactive ...
001f ---- 6874                         ld          R6, [#fwCtrlExt/bvTaskTerminateReq]
0020 ---- ed92                         inv         R6
0021 ---- fd06                         and         R7, R6
0022 ---- 7c70                         st          R7, [#fwCtrlExt/bvActiveTasks]

                                       ; We're READY for another request
0023 ---- 642d                         iobset      #IOB_EVCTL_SWEV_READY, [#IOP_EVCTL_SWEVSET]

                                       ; Generate an ALERT interrupt if needed before powering back down
0024 ---- 0450                         jmp         GenAlertInterrupt;

               /handleReq:
                                       ; Restore the task ID, and load the function pointer (here to avoid pipeline hazard)
0025 ---- 786b                         ld          R7, [#fwCtrlInt/taskId]
0026 ---- 8f1f                         ld          R0, [R7+R0]

                                       ; Skip this request?
0027 ---- ed8f                         lsr         R6, R7
0028 ---- ec01                         tst         R6, #0x0001
0029 ---- be01                         bnz         /noSkip
002a ---- adb7                             rts
               /noSkip:
                                       ; Make the call by jump, with return (rts) in the "called" function
002b ---- 8db7                         jmp         R0




               AonRtcCh2Vector:
                                       ; Start clearing the RTC event
002c ---- 6630                         iobset      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Clear the vector flag
002d ---- 6542                         iobset      #1, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; For each task (R0 is the current task ID) ...
002e ---- 0000                         ld          R0, #0
               /loop:
                                           ; ... that is active ...
002f ---- 1870                             ld          R1, [#fwCtrlExt/bvActiveTasks]
0030 ---- 9d88                             lsr         R1, R0
0031 ---- 9c01                             tst         R1, #0x0001
0032 ---- b60d                             bz          /skip

                                               ; Fetch number of RTC intervals until next execution
0033 ---- 1067                                 ld          R1, #pFwTaskExecuteScheduleTable
0034 ---- af19                                 ld          R2, [R1+R0]

                                               ; If not already 0, decrement and store. If then 0 ...
0035 ---- aa00                                 cmp         R2, #0
0036 ---- b609                                 beq         /skip
0037 ---- a8ff                                 add         R2, #-1
0038 ---- af39                                 st          R2, [R1+R0]
0039 ---- be06                                 bnz         /skip

                                                   ; ... execute the task
003a ---- 0c6b                                     st          R0, [#fwCtrlInt/taskId]
003b ---- 8869                                     add         R0, #pFwTaskExecuteFuncTable
003c ---- 8f08                                     ld          R0, [R0]
                                                   ; Insert NOP to avoid pipeline hazard
003d ---- fd47                                     nop
003e ---- 9db7                                     jsr         R0
003f ---- 086b                                     ld          R0, [#fwCtrlInt/taskId]
               /skip:
                                           ; Move on to the next task
0040 ---- 8801                             add         R0, #1

0041 ---- 8a01                         cmp         R0, #TASK_COUNT
0042 ---- beec                         bneq        /loop

                                       ; Wait for the ACK event to be cleared
0043 ---- 262f /waitOnRtcClearing:     iobtst      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVFLAGS]
0044 ---- aefe                         biob1       /waitOnRtcClearing
0045 ---- 4630                         iobclr      #IOB_WUC_WUEV_RTC, [#IOP_WUC_WUEVCLR]

                                       ; Generate an ALERT interrupt if needed
0046 ---- 0450                         jmp         GenAlertInterrupt;




               Event0Vector:
                                       ; Disable and clear the vector flag
0047 ---- 5527                         iobclr      #IOB_EVCTL_VECCFG1_VEC2_EN, [#IOP_EVCTL_VECCFG1]
0048 ---- 6642                         iobset      #2, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Set the task ID
0049 ---- 0000                         ld          R0, #0
004a ---- 0c6b                         st          R0, [#fwCtrlInt/taskId]

                                       ; Jump to the event task code
004b ---- 140b                         jsr         FwEmptyFunc

                                       ; Generate an ALERT interrupt if needed
004c ---- 0450                         jmp         GenAlertInterrupt;




               TaskAlertAckVector:
                                       ; Clear the vector flag
004d ---- 6742                         iobset      #3, [#IOP_EVCTL_VECFLAGSCLR]

                                       ; Re-enable generation of ALERT interrupts
004e ---- 03ff                         ld          R0, #-1
004f ---- 0c6d                         st          R0, [#fwCtrlInt/alertGenMask]

                                       ; Fall through to GenAlertInterrupt to generate another ALERT interrupt if needed




               GenAlertInterrupt:
                                       ; Do we have any ALERT-generating flags pending?
0050 ---- 786c                         ld          R7, [#fwCtrlInt/bvTaskIoAlert]

                                       ; Skip if the last I/O ALERT interrupt has not been acknowledged
0051 ---- 686d                         ld          R6, [#fwCtrlInt/alertGenMask]
0052 ---- ed37                         tst         R6, R7
0053 ---- b605                         bz          /skipAlertGen

                                           ; Transfer I/O flags from internal to external
0054 ---- 0000                             ld          R0, #0
0055 ---- 0c6c                             st          R0, [#fwCtrlInt/bvTaskIoAlert]
0056 ---- 7c71                             st          R7, [#fwCtrlExt/bvTaskIoAlert]

                                           ; Generate the ALERT interrupt, and clear the generation mask
0057 ---- 652d                             iobset      #IOB_EVCTL_SWEV_ALERT, [#IOP_EVCTL_SWEVSET]
0058 ---- 0c6d                             st          R0, [#fwCtrlInt/alertGenMask]
               /skipAlertGen:
                                       ; Fall through to PowerDown ...




               PowerDown:
                                       ; If there are no unacknowledged ALERTs and no vectors pending ...
0059 ---- 786d                         ld          R7, [#fwCtrlInt/alertGenMask]
005a ---- 686e                         ld          R6, [#fwCtrlInt/alertCanPdAuxMask]
005b ---- fd0e                         or          R7, R6
005c ---- f801                         add         R7, #1 ; 0xFFFF -> 0x0000
005d ---- e92b                         in          R6, [#IOP_EVCTL_VECFLAGS]
005e ---- fd0e                         or          R7, R6
005f ---- be01                         bnz         /noPowerDown

                                           ; Assert the power-down request. We'll make sure that it has taken effect
                                           ; or been completely ignored when waking up again
0060 ---- 6436                             iobset      #0, [#IOP_WUC_PWRDWNREQ]
               /noPowerDown:
                                       ; Sleep until the next event
0061 ---- bdb7 sleepInstr:             sleep




0062 ---- 241a AdiDdiAcquire:          iobtst      #0, [#IOP_SMPH_SMPH0]
0063 ---- a6fe                         biob0       AdiDdiAcquire
0064 ---- adb7                         rts

0065 ---- 641a AdiDdiRelease:          iobset      #0, [#IOP_SMPH_SMPH0]
0066 ---- adb7                         rts




               ; RTC ticks until next execution, one word for each task
               pFwTaskExecuteScheduleTable:
0067 ---- 0000                         dw          #0

               ; Task code function pointers for each task code block, one word for each task
               pFwTaskInitializeFuncTable:
0068 ---- 0078                         dw          #htu21dtask/initialize
               pFwTaskExecuteFuncTable:
0069 ---- 007b                         dw          #htu21dtask/execute
               pFwTaskTerminateFuncTable:
006a ---- 00d0                         dw          #htu21dtask/terminate

               ; Run-time logging log requests and masks, one bit for each struct, one word for each task
               pRtlTaskLogReqTable:
               ; (Run-time logging is not used in this project)
               pRtlTaskLogMaskTable:
               ; (Run-time logging is not used in this project)


               ; Internal control data
               fwCtrlInt:
006b ---- 0000 /taskId:                dw          #0      ; ID of the currently running task
006c ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
006d ---- ffff /alertGenMask:          dw          #0xFFFF ; Can generate an ALERT interrupt now? (0xFFFF = yes, 0x0000 = no)
006e ---- 0000 /alertCanPdAuxMask:     dw          #0x0000 ; Can power down AUX domain after ALERT interrupt generation? (0xFFFF = yes, 0x0000 = no)
006f ---- 0000 /rtlStructLockReq:      dw          #0x0000 ; Run-time logging struct lock request (0=idle -> 1=requested -> 2=ready -> access -> 0=idle)

               ; External control data, shared with the driver
               fwCtrlExt:
0070 ---- 0000 /bvActiveTasks:         dw          #0x0000 ; Indicates which tasks are currently active
0071 ---- 0000 /bvTaskIoAlert:         dw          #0x0000 ; LSB = Normal data exchange, MSB = Overflow or underflow
0072 ---- 0000 /bvTaskInitializeReq:   dw          #0x0000 ; Requests tasks to start
0073 ---- 0000 /bvTaskExecuteReq:      dw          #0x0000 ; Requests tasks to execute once immediately
0074 ---- 0000 /bvTaskTerminateReq:    dw          #0x0000 ; Requests tasks to stop


               .segment end "Framework"


               fwTaskDataStructures:
               .segment begin "Task: HTU21Dtask"
               htu21dtask/cfg:
               htu21dtask/input:
               htu21dtask/output:
               htu21dtask/output/hum:
0075 ---- 0000                         dw          #0
               htu21dtask/output/tmp:
0076 ---- 0000                         dw          #0
               htu21dtask/state:
               htu21dtask/state/i2cStatus:
0077 ---- 0000                         dw          #0
               .segment end "Task: HTU21Dtask"


               .segment begin "Task: HTU21Dtask"
               htu21dtask/initialize:
               ;? // Schedule the first execution
               ;? fwScheduleTask(1);
0078 ---- 0001                         ld          R0, #1
0079 ---- 0c67                         st          R0, [#(pFwTaskExecuteScheduleTable + 0)]
               htu21dtask/initializeDone:
007a ---- adb7                         rts




               htu21dtask/execute:
               ;? macro ReadParam(result, comand) {
               ;?
               ;?     // Configure and start the next measurement
               ;?     i2cStart();
               ;?     i2cTx(I2C_OP_WRITE | ALS_I2C_ADDR);
               ;?     i2cTx(comand);
               ;?     //    i2cTx(TEMP_MEASUR_NO_HOLD);
               ;?     //    i2cStop();
               ;?
               ;?     //fwDelayUs(10,FW_DELAY_RANGE_1_MS);
               ;?     //i2cStop();
               ;?     //i2cStart();
               ;? //    i2cRepeatedStart();
               ;? //    i2cTx(I2C_OP_READ | ALS_I2C_ADDR);
               ;?     //i2cStop();
               ;?
               ;? // do {
               ;? //    fwDelayUs(10000,FW_DELAY_RANGE_100_MS);  // Wait 5 ms
               ;? //    i2cRepeatedStart();
               ;? //    i2cTx(I2C_OP_READ | ALS_I2C_ADDR);
               ;? // } while (state.i2cStatus != 0x0000);
               ;?
               ;?     fwDelayUs(50000,FW_DELAY_RANGE_100_MS);  // Wait 50 ms
               ;?     i2cRepeatedStart();
               ;?     i2cTx(I2C_OP_READ | ALS_I2C_ADDR);
               ;?
               ;?     U16 DataRegM;
               ;?     U16 DataRegL;
               ;?     U16 CsReg;
               ;?
               ;?     i2cRxAck(DataRegM);
               ;?     i2cRxAck(DataRegL);
               ;?     i2cRxNack(CsReg);
               ;?
               ;?     i2cStop();
               ;?
               ;?     result = (DataRegM << 8) | (DataRegL & 0xFC);
               ;? }
               ;? //---------------------------------------------------------------------------------------------
               ;? ReadParam(output.tmp, TEMP_MEASUR_NO_HOLD);
               ;? >
               ;? >       // Configure and start the next measurement
               ;? >       i2cStart();
007b ---- 6000                         ld          R6, #0x0000
007c ---- 14d7                         jsr         I2cStart
007d ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >       i2cTx(I2C_OP_WRITE | ALS_I2C_ADDR);
007e ---- 7080                         ld          R7, #128
007f ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
0080 ---- 14ee                         jsr         I2cTxByte
0081 ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >       i2cTx(comand);
0082 ---- 70f3                         ld          R7, #243
0083 ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
0084 ---- 14ee                         jsr         I2cTxByte
0085 ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >       //    i2cTx(TEMP_MEASUR_NO_HOLD);
               ;? >       //    i2cStop();
               ;? >
               ;? >       //fwDelayUs(10,FW_DELAY_RANGE_1_MS);
               ;? >       //i2cStop();
               ;? >       //i2cStart();
               ;? >   //    i2cRepeatedStart();
               ;? >   //    i2cTx(I2C_OP_READ | ALS_I2C_ADDR);
               ;? >       //i2cStop();
               ;? >
               ;? >   // do {
               ;? >   //    fwDelayUs(10000,FW_DELAY_RANGE_100_MS);  // Wait 5 ms
               ;? >   //    i2cRepeatedStart();
               ;? >   //    i2cTx(I2C_OP_READ | ALS_I2C_ADDR);
               ;? >   // } while (state.i2cStatus != 0x0000);
               ;? >
               ;? >       fwDelayUs(50000,FW_DELAY_RANGE_100_MS);  // Wait 50 ms
0086 ---- 704a                         ld          R7, #(((50000 * 24 ) + ((1 << 14) - 1)) >> 14)
0087 ---- 600e                         ld          R6, #14
0088 ---- 150c                         jsr         FwDelay
               ;? >       i2cRepeatedStart();
0089 ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
008a ---- 14d1                         jsr         I2cRepeatedStart
008b ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >       i2cTx(I2C_OP_READ | ALS_I2C_ADDR);
008c ---- 7081                         ld          R7, #129
008d ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
008e ---- 14ee                         jsr         I2cTxByte
008f ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >
               ;? >       U16 DataRegM;
               ;? >       U16 DataRegL;
               ;? >       U16 CsReg;
               ;? >
               ;? >       i2cRxAck(DataRegM);
0090 ---- 7000                         ld          R7, #0x0000
0091 ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
0092 ---- 1512                         jsr         I2cRxByte
0093 ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
0094 ---- 8d47                         ld          R0, R7
               ;? >       i2cRxAck(DataRegL);
0095 ---- 7000                         ld          R7, #0x0000
0096 ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
0097 ---- 1512                         jsr         I2cRxByte
0098 ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
0099 ---- 9d47                         ld          R1, R7
               ;? >       i2cRxNack(CsReg);
009a ---- 7001                         ld          R7, #0x0001
009b ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
009c ---- 1512                         jsr         I2cRxByte
009d ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >
               ;? >       i2cStop();
009e ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
009f ---- 1531                         jsr         I2cStop
00a0 ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >
               ;? >       result = (DataRegM << 8) | (DataRegL & 0xFC);
00a1 ---- 8da0                         lsl         R0, #8
00a2 ---- 90fc                         and         R1, #252
00a3 ---- 8d09                         or          R0, R1
00a4 ---- 0c76                         st          R0, [#htu21dtask/output/tmp]
               ;? ReadParam(output.hum, HUM_MEASUR_NO_HOLD);
               ;? >
               ;? >       // Configure and start the next measurement
               ;? >       i2cStart();
00a5 ---- 6000                         ld          R6, #0x0000
00a6 ---- 14d7                         jsr         I2cStart
00a7 ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >       i2cTx(I2C_OP_WRITE | ALS_I2C_ADDR);
00a8 ---- 7080                         ld          R7, #128
00a9 ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
00aa ---- 14ee                         jsr         I2cTxByte
00ab ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >       i2cTx(comand);
00ac ---- 70f5                         ld          R7, #245
00ad ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
00ae ---- 14ee                         jsr         I2cTxByte
00af ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >       //    i2cTx(TEMP_MEASUR_NO_HOLD);
               ;? >       //    i2cStop();
               ;? >
               ;? >       //fwDelayUs(10,FW_DELAY_RANGE_1_MS);
               ;? >       //i2cStop();
               ;? >       //i2cStart();
               ;? >   //    i2cRepeatedStart();
               ;? >   //    i2cTx(I2C_OP_READ | ALS_I2C_ADDR);
               ;? >       //i2cStop();
               ;? >
               ;? >   // do {
               ;? >   //    fwDelayUs(10000,FW_DELAY_RANGE_100_MS);  // Wait 5 ms
               ;? >   //    i2cRepeatedStart();
               ;? >   //    i2cTx(I2C_OP_READ | ALS_I2C_ADDR);
               ;? >   // } while (state.i2cStatus != 0x0000);
               ;? >
               ;? >       fwDelayUs(50000,FW_DELAY_RANGE_100_MS);  // Wait 50 ms
00b0 ---- 704a                         ld          R7, #(((50000 * 24 ) + ((1 << 14) - 1)) >> 14)
00b1 ---- 600e                         ld          R6, #14
00b2 ---- 150c                         jsr         FwDelay
               ;? >       i2cRepeatedStart();
00b3 ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
00b4 ---- 14d1                         jsr         I2cRepeatedStart
00b5 ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >       i2cTx(I2C_OP_READ | ALS_I2C_ADDR);
00b6 ---- 7081                         ld          R7, #129
00b7 ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
00b8 ---- 14ee                         jsr         I2cTxByte
00b9 ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >
               ;? >       U16 DataRegM;
               ;? >       U16 DataRegL;
               ;? >       U16 CsReg;
               ;? >
               ;? >       i2cRxAck(DataRegM);
00ba ---- 7000                         ld          R7, #0x0000
00bb ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
00bc ---- 1512                         jsr         I2cRxByte
00bd ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
00be ---- 8d47                         ld          R0, R7
               ;? >       i2cRxAck(DataRegL);
00bf ---- 7000                         ld          R7, #0x0000
00c0 ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
00c1 ---- 1512                         jsr         I2cRxByte
00c2 ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
00c3 ---- 9d47                         ld          R1, R7
               ;? >       i2cRxNack(CsReg);
00c4 ---- 7001                         ld          R7, #0x0001
00c5 ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
00c6 ---- 1512                         jsr         I2cRxByte
00c7 ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >
               ;? >       i2cStop();
00c8 ---- 6877                         ld          R6, [#htu21dtask/state/i2cStatus]
00c9 ---- 1531                         jsr         I2cStop
00ca ---- 6c77                         st          R6, [#htu21dtask/state/i2cStatus]
               ;? >
               ;? >       result = (DataRegM << 8) | (DataRegL & 0xFC);
00cb ---- 8da0                         lsl         R0, #8
00cc ---- 90fc                         and         R1, #252
00cd ---- 8d09                         or          R0, R1
00ce ---- 0c75                         st          R0, [#htu21dtask/output/hum]
               ;?
               ;? //output.hum = (DataRegM << 8) | DataRegL;  // hum = (HumRegH << 8) | HumRegL;
               ;? //output.tmp = (DataRegM << 8) | DataRegL;  // tmp = (TemRegH << 8) | TemRegL&0xFC;
               ;?
               ;? //macro pulseLedPinMultiple(pulseCount) {
               ;? //    U16 pulsesLeft = pulseCount;
               htu21dtask/executeDone:
00cf ---- adb7                         rts




               htu21dtask/terminate:
               ;?
               htu21dtask/terminateDone:
00d0 ---- adb7                         rts
               .segment end "Task: HTU21Dtask"


               .segment begin "Procedure Library"
               ; CLOBBERS:
               ;     R5
               I2cRepeatedStart:
                                       ; Wait T_LOW (SDA is already pull-up)
00d1 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
00d2 ---- 14dc                         jsr         I2cWaitDelay

                                       ; SCL = pull-up
00d3 ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Wait for SCL stretching to end or time out
00d4 ---- 14df                         jsr         I2cWaitSclStretch

                                       ; Wait T_SU_STA
00d5 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
00d6 ---- 14dc                         jsr         I2cWaitDelay
               I2cStart:
                                       ; SDA = driven low
00d7 ---- 460f                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                       ; Wait T_HD_STA
00d8 ---- 53f8                         ld          R5, #-((I2C_BASE_DELAY) - (1))
00d9 ---- 14dc                         jsr         I2cWaitDelay

                                       ; SCL = driven low
00da ---- 470f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Done
00db ---- adb7                         rts




               ; PARAMETERS
               ;     R5 = Delay excluding the I2cWaitDelay() call, in instruction cycles
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitDelay:
                                       ; Wait for the specified number of cycles
00dc ---- d802 /waitLoop:                  add         R5, #2
00dd ---- defe                         bneg        /waitLoop

                                       ; Done
00de ---- adb7                         rts




               ; PARAMETERS:
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cWaitSclStretch:
                                       ; Load the timeout (up to 20 ms) loop counter = configured number of us
00df ---- 53ce                         ld          R5, #(-I2C_STRETCH_TIMEOUT_US)
               /waitLoop:
                                           ; If SCL is high, we're done
00e0 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
00e1 ---- ae0b                             biob1       /done
                                           ; Unroll the loop to 12 instructions = 1 per loop for faster response
00e2 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
00e3 ---- ae09                             biob1       /done
00e4 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
00e5 ---- ae07                             biob1       /done
00e6 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
00e7 ---- ae05                             biob1       /done
00e8 ---- 2713                             iobtst      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SCL >> 3))]
00e9 ---- ae03                             biob1       /done

00ea ---- d801                         add         R5, #1;
00eb ---- bef4                         bnz         /waitLoop

               /timeout:               ; Timeout has occurred, so OR it into the flags and bail out
00ec ---- e202                         or          R6, #0x0002

               /done:                  ; Done
00ed ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = TX byte shift register
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = Updated TX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cTxByte:
                                       ; Bail out if an error has occurred
00ee ---- ea00                         cmp         R6, #0
00ef ---- be1b                         bnz         /done


                                       ; Transmit each bit in the data byte ...
00f0 ---- b50e                         loop        #8, /byteLoopEnd

                                           ; Output the bit to SDA
00f1 ---- fda1                             lsl         R7, #1
00f2 8601 fc00                             tst         R7, #0x0100
00f4 ---- b602                             bz          /dataSdaLow
00f5 ---- 660f /dataSdaHigh:                   iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
00f6 ---- 8e02                             bra         /dataSdaDone
00f7 ---- 460f /dataSdaLow:                    iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
00f8 ---- fd47                             nop
               /dataSdaDone:
                                           ; Wait T_LOW
00f9 ---- 53fa                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (7))
00fa ---- 14dc                             jsr         I2cWaitDelay

                                           ; SCL = pull-up
00fb ---- 670f                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                           ; Wait for SCL stretching to end or time out
00fc ---- 14df                             jsr         I2cWaitSclStretch

                                           ; Wait T_HIGH
00fd ---- 53fd                             ld          R5, #-(I2C_BASE_DELAY - (I2C_WAIT_STRETCH_DELAY + 1))
00fe ---- 14dc                             jsr         I2cWaitDelay

                                           ; SCL = driven low
00ff ---- 470f                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:

                                       ; Receive the ACK bit
                                       ; SDA = pull-up
0100 ---- 660f                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                       ; Wait T_LOW
0101 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0102 ---- 14dc                         jsr         I2cWaitDelay

                                       ; SCL = pull-up
0103 ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Wait for SCL stretching to end or time out
0104 ---- 14df                         jsr         I2cWaitSclStretch

                                       ; Wait T_HIGH
0105 ---- 53fa                         ld          R5, #-((I2C_BASE_DELAY) - (3))
0106 ---- 14dc                         jsr         I2cWaitDelay

                                       ; Read and store the SDA value in the status word
0107 ---- 2613                         iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
0108 ---- a601                         biob0       /ackSdaLow
0109 ---- e201                             or          R6, #0x01
               /ackSdaLow:
                                       ; SCL = driven low
010a ---- 470f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]


               /done:                  ; Done
010b ---- adb7                         rts




               ; 3 + 5 CPU cycles = 16 clock cycles = 0.66 microsecond are added to the specified delay (parameter
               ; loading and timer configuration)
               ;
               ; PARAMETERS:
               ;     R7 = Delay
               ;     R6 = Prescaler exponent
               ;
               ; CLOBBERS:
               ;     R6
               FwDelay:
                                       ; Set the delay
010c ---- fb0c                         out         R7, [#IOP_TIMER01_T0TARGET]

                                       ; Configure the timer (from clock, single-mode, prescaler exponent = R6)
010d ---- eda4                         lsl         R6, #4
010e ---- eb09                         out         R6, [#IOP_TIMER01_T0CFG]

                                       ; Start the timer, wait for it to trigger, and stop it
010f ---- 640b                         iobset      #0, [#IOP_TIMER01_T0CTL]
0110 ---- cdb1                         wev1        #WEVSEL_TIMER0
0111 ---- adb7                         rts




               ; PARAMETERS:
               ;     R7 = Acknowledgment bit value, 0x0000 to transmit ACK, 0x0001 to transmit NAK
               ;     R6 = Status flags
               ;
               ; RETURN VALUES:
               ;     R7 = RX byte shift register
               ;     R6 = Updated status flags
               ;
               ; CLOBBERS:
               ;     R5
               I2cRxByte:
                                       ; Bail out if an error has occurred
0112 ---- ea00                         cmp         R6, #0
0113 ---- be1c                         bnz         /done


                                       ; Receive each bit in the data byte ...
0114 ---- b50b                         loop        #8, /byteLoopEnd

                                           ; SDA = pull-up
0115 ---- 660f                             iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                           ; Wait T_LOW
0116 ---- 53f5                             ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
0117 ---- 14dc                             jsr         I2cWaitDelay

                                           ; SCL = pull-up
0118 ---- 670f                             iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                           ; Wait for SCL stretching to end or time out
0119 ---- 14df                             jsr         I2cWaitSclStretch

                                           ; Wait T_HIGH
011a ---- 53ff                             ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 3))
011b ---- 14dc                             jsr         I2cWaitDelay

                                           ; Read and store SDA
011c ---- fda1                             lsl         R7, #1
011d ---- 2613                             iobtst      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODIN + (AUXIO_I2C_SDA >> 3))]
011e ---- a601                             biob0       /dataSdaLow
011f ---- f201                                 or          R7, #0x01
               /dataSdaLow:
                                           ; SCL = driven low
0120 ---- 470f                             iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]
               /byteLoopEnd:

                                       ; Transmit the ACK bit, which is now in bit 8 of the shift register
                                       ; Output the bit to SDA
0121 8601 fc00                         tst         R7, #0x0100
0123 ---- b602                         bz          /ackSdaLow
0124 ---- 660f /ackSdaHigh:                iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0125 ---- 8e02                         bra         /ackSdaDone
0126 ---- 460f /ackSdaLow:                 iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]
0127 ---- fd47                         nop
               /ackSdaDone:
                                       ; Wait T_LOW
0128 ---- 53f9                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (6))
0129 ---- 14dc                         jsr         I2cWaitDelay

                                       ; SCL = pull-up
012a ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Wait for SCL stretching to end or time out
012b ---- 14df                         jsr         I2cWaitSclStretch

                                       ; Wait T_HIGH
012c ---- 53fd                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
012d ---- 14dc                         jsr         I2cWaitDelay

                                       ; SCL = driven low
012e ---- 470f                         iobclr      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Mask the ACK bit in the received data
012f ---- f0ff                         and         R7, #0xFF


               /done:                  ; Done
0130 ---- adb7                         rts




               ; CLOBBERS:
               ;     R5
               I2cStop:
                                       ; SDA = driven low
0131 ---- 460f                         iobclr      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                       ; Wait T_LOW
0132 ---- 53f4                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (1))
0133 ---- 14dc                         jsr         I2cWaitDelay

                                       ; SCL = pull-up
0134 ---- 670f                         iobset      #(AUXIO_I2C_SCL & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SCL >> 3))]

                                       ; Wait for SCL stretching to end or time out
0135 ---- 14df                         jsr         I2cWaitSclStretch

                                       ; Wait T_SU_STO
0136 ---- 53fd                         ld          R5, #-((I2C_BASE_DELAY) - (I2C_WAIT_STRETCH_DELAY + 1))
0137 ---- 14dc                         jsr         I2cWaitDelay

                                       ; SDA = pull-up
0138 ---- 660f                         iobset      #(AUXIO_I2C_SDA & 0x7), [#(IOP_AIODIO0_GPIODOUT + (AUXIO_I2C_SDA >> 3))]

                                       ; Wait T_BUF
0139 ---- 53f5                         ld          R5, #-((I2C_BASE_DELAY + I2C_EXT_DELAY) - (2))
013a ---- 14dc                         jsr         I2cWaitDelay

                                       ; Done
013b ---- adb7                         rts
               .segment end "Procedure Library"


; Generated by NATAN-MAIN at 2020-10-31 23:22:57.891
