<?xml version="1.0" encoding="UTF-8"?>
<project name="HTU21D" version="2.7.0.155">
    <desc><![CDATA[Digital Relative Humidity sensor with Temperature output]]></desc>
    <pattr name="Apply default power mode">0</pattr>
    <pattr name="Board">None</pattr>
    <pattr name="Chip name">CC2640R2F</pattr>
    <pattr name="Chip package">QFN48 7x7 RGZ</pattr>
    <pattr name="Chip revision">-</pattr>
    <pattr name="Clock in active mode">0</pattr>
    <pattr name="Code prefix">hdu21d</pattr>
    <pattr name="Default power mode">0</pattr>
    <pattr name="Operating system">TI-RTOS</pattr>
    <pattr name="Output directory">D:/Projects/Sensor Controller Studio/HTU21D_sensor/scif_files</pattr>
    <pattr name="RTC tick interval (16.16 format)">2000</pattr>
    <pattr name="Run-time logging UART RX pin"></pattr>
    <pattr name="Run-time logging UART TX pin"></pattr>
    <task name="HTU21Dtask">
        <desc><![CDATA[]]></desc>
        <tattr name="ALS_I2C_ADDR" desc="I2C Slave address." type="expr_hex" content="const" scope="task" min="0" max="65535">0x80</tattr>
        <tattr name="HUM_MEASUR_HOLD" desc="Command code: Trigger Humidity Measurement. Hold master." type="expr_hex" content="const" scope="task" min="0" max="65535">0xE5</tattr>
        <tattr name="HUM_MEASUR_NO_HOLD" desc="Command code: Trigger Temperature Measurement. No Hold master." type="expr_hex" content="const" scope="task" min="0" max="65535">0xF5</tattr>
        <tattr name="POLYNOMIAL" type="expr_hex" content="const" scope="task" min="0" max="65535">0x131</tattr>
        <tattr name="READ_REG" desc="Command code: Read User Register." type="expr_hex" content="const" scope="task" min="0" max="65535">0xE7</tattr>
        <tattr name="RdBufLen" type="expr" content="const" scope="task" min="0" max="65535">6</tattr>
        <tattr name="SOFT_RESET" desc="Command code: Soft Reset." type="expr_hex" content="const" scope="task" min="0" max="65535">0xFE</tattr>
        <tattr name="TEMP_MEASUR_HOLD" desc="Command code: Trigger Temperature Measurement. Hold master." type="expr_hex" content="const" scope="task" min="0" max="65535">0xE3</tattr>
        <tattr name="TEMP_MEASUR_NO_HOLD" desc="Command code: Trigger Temperature Measurement. No Hold master. " type="expr_hex" content="const" scope="task" min="0" max="65535">0xF3</tattr>
        <tattr name="TwoByteArreyLen" type="expr" content="const" scope="task" min="0" max="65535">2</tattr>
        <tattr name="WRITE_REG" desc="Command code: Write User Register." type="expr_hex" content="const" scope="task" min="0" max="65535">0xE6</tattr>
        <tattr name="cfg.UserRegData" desc="Data for write in User Register" type="expr_hex" content="struct" scope="task" min="0" max="65535">0x0082</tattr>
        <tattr name="input.ReadRequest" desc="Request to read the user's register." type="expr" content="struct" scope="task" min="0" max="1">1</tattr>
        <tattr name="input.ResetRequest" desc="Soft Reset request." type="expr" content="struct" scope="task" min="0" max="1">1</tattr>
        <tattr name="input.WriteRequest" desc="Request to write in the user's register." type="expr" content="struct" scope="task" min="0" max="1">1</tattr>
        <tattr name="output.UserRegContent" desc="Content of the user register." type="expr_hex" content="struct" scope="task" min="0" max="65535">1</tattr>
        <tattr name="output.hum" type="expr" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.humCRC" type="expr_hex" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.tmp" type="expr" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.tmpCRC" type="expr_hex" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="state.TwoByte" size="TwoByteArreyLen" type="expr_hex" content="struct_array" scope="task" min="0" max="65535">0</tattr>
        <tattr name="state.humOK" type="expr" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="state.tempOK" type="expr" content="struct" scope="task" min="0" max="65535">0</tattr>
        <resource_ref name="ADC" enabled="0"/>
        <resource_ref name="AON Domain Functionality" enabled="0"/>
        <resource_ref name="Accumulator-Based Math" enabled="0"/>
        <resource_ref name="Analog Open-Drain Pins" enabled="0"/>
        <resource_ref name="Analog Open-Source Pins" enabled="0"/>
        <resource_ref name="Analog Pins" enabled="0"/>
        <resource_ref name="COMPA" enabled="0"/>
        <resource_ref name="COMPA Event Trigger" enabled="0"/>
        <resource_ref name="COMPB" enabled="0"/>
        <resource_ref name="COMPB Event Trigger" enabled="0"/>
        <resource_ref name="Delay Insertion" enabled="1"/>
        <resource_ref name="Differential Output Pins" enabled="0"/>
        <resource_ref name="Digital Input Pins" enabled="0"/>
        <resource_ref name="Digital Open-Drain Pins" enabled="0"/>
        <resource_ref name="Digital Open-Source Pins" enabled="0"/>
        <resource_ref name="Digital Output Pins" enabled="0"/>
        <resource_ref name="Dynamic Power Control" enabled="0"/>
        <resource_ref name="GPIO Event Trigger" enabled="0"/>
        <resource_ref name="I2C Master" enabled="1">
            <rattr name="SCL frequency">0</rattr>
            <rattr name="SCL stretch timeout">50</rattr>
            <io_usage>
                <uattr name="SCL pin/0000">DIO4</uattr>
                <uattr name="SDA pin/0000">DIO5</uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="ISRC" enabled="0"/>
        <resource_ref name="LCD Controller" enabled="0">
            <rattr name="Waveform state count">8</rattr>
            <io_usage>
                <uattr name="Output drive strength">0</uattr>
                <uattr name="Pin count">20</uattr>
                <uattr name="Pin/0000"></uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
                <uattr name="Pin/0016"></uattr>
                <uattr name="Pin/0017"></uattr>
                <uattr name="Pin/0018"></uattr>
                <uattr name="Pin/0019"></uattr>
                <uattr name="Pin/0020"></uattr>
                <uattr name="Pin/0021"></uattr>
                <uattr name="Pin/0022"></uattr>
                <uattr name="Pin/0023"></uattr>
                <uattr name="Pin/0024"></uattr>
                <uattr name="Pin/0025"></uattr>
                <uattr name="Pin/0026"></uattr>
                <uattr name="Pin/0027"></uattr>
                <uattr name="Pin/0028"></uattr>
                <uattr name="Pin/0029"></uattr>
                <uattr name="Pin/0030"></uattr>
                <uattr name="Pin/0031"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Math and Logic" enabled="0"/>
        <resource_ref name="Multi-Buffered Output Data Exchange" enabled="0">
            <rattr name="Buffer count">2</rattr>
            <rattr name="Indicate overflow at buffer check">1</rattr>
            <rattr name="Indicate overflow at buffer switch">0</rattr>
            <rattr name="Prevent overflow at buffer switch">1</rattr>
        </resource_ref>
        <resource_ref name="Peripheral Sharing" enabled="0"/>
        <resource_ref name="Pulse Counter" enabled="0"/>
        <resource_ref name="RTC Multi-Event Capture" enabled="0"/>
        <resource_ref name="RTC-Based Execution Scheduling" enabled="1"/>
        <resource_ref name="Reference DAC" enabled="0"/>
        <resource_ref name="Run-Time Logging" enabled="0"/>
        <resource_ref name="SPI Chip Select" enabled="0"/>
        <resource_ref name="SPI Data Transfer" enabled="0">
            <rattr name="Bit rate">0</rattr>
            <rattr name="MISO configuration when inactive">-1</rattr>
            <rattr name="MOSI configuration on initialization">0</rattr>
            <rattr name="MOSI configuration on uninitialization">0</rattr>
            <rattr name="SCLK configuration on initialization">0</rattr>
            <rattr name="SCLK configuration on uninitialization">0</rattr>
            <io_usage>
                <uattr name="MISO pin/0000"></uattr>
                <uattr name="MOSI pin/0000"></uattr>
                <uattr name="SCLK pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Signal Observation" enabled="0"/>
        <resource_ref name="System CPU Alert" enabled="1"/>
        <resource_ref name="System Event Trigger" enabled="0"/>
        <resource_ref name="TDC" enabled="0"/>
        <resource_ref name="Timer 0" enabled="0"/>
        <resource_ref name="Timer 0 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 1" enabled="0"/>
        <resource_ref name="Timer 1 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 2" enabled="0"/>
        <resource_ref name="Timer 2 Event Trigger" enabled="0"/>
        <resource_ref name="UART Emulator" enabled="0">
            <rattr name="RX buffer size">64</rattr>
            <rattr name="Required idle period before enabling RX">11</rattr>
            <rattr name="TX buffer size">64</rattr>
            <io_usage>
                <uattr name="RX pin/0000"></uattr>
                <uattr name="TX pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <sccode name="event0" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event1" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event2" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event3" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="execute" init_power_mode="0"><![CDATA[//=============================================================================================
macro HTU21_OneByteCrc(data, CS, result) {

    U16 crc = CS;
    crc ^= data;
    for (U16 n = 0; n < 8; n++) {
        if (crc & 0x80) {
            crc = (crc << 1) ^ POLYNOMIAL;
        } else {
            crc = (crc << 1);
        }
    }
    //----
    result = crc;
}
//=============================================================================================

macro HTU21_CSumIsOk(data0, data1, checksum,result) {

    U16 chekSum;
    U16 crc;
    HTU21_OneByteCrc(data0, 0, chekSum);
    HTU21_OneByteCrc(data1, chekSum,crc);
    //----
    if (crc != checksum) {
        result = -1;
    } else {
        result = 0;
    }


}
//=============================================================================================
macro HTU21_CheckCrc(data0, data1, checksum,result) {

    U16 crc = 0;
    crc ^= data0;
    for (U16 n = 0; n < 8; n++) {
        if (crc & 0x80) {
            crc = (crc << 1) ^ POLYNOMIAL;
        } else {
            crc = (crc << 1);
        }
    }
    //----
    crc ^= data1;
    for (U16 n = 0; n < 8; n++) {
        if (crc & 0x80) {
            crc = (crc << 1) ^ POLYNOMIAL;
        } else {
            crc = (crc << 1);
        }
    }
    //----
    if (crc != checksum) {
        result = -1;
    } else {
        result = 0;
    }

}
//=============================================================================================
macro ReadTemp(result, CRC, comand) {

    // Configure and start the next measurement
    i2cStart();
    i2cTx(I2C_OP_WRITE | ALS_I2C_ADDR);
    i2cTx(comand);
    //------
    fwDelayUs(50000,FW_DELAY_RANGE_100_MS);  // Wait 50 ms
    //------
    i2cRepeatedStart();
    i2cTx(I2C_OP_READ | ALS_I2C_ADDR);

    U16 DataRegM;
    U16 DataRegL;
    U16 CsReg;

    i2cRxAck(DataRegM);
    i2cRxAck(DataRegL);
    i2cRxNack(CsReg);

    i2cStop();
    //------
    U16 CRCok;
    HTU21_CheckCrc(DataRegM, DataRegL, CsReg, CRCok);
    if(CRCok == 0) {
        result = (DataRegM << 8) | (DataRegL & 0xFC);
        state.tempOK=1;

    } else {
        //result=0xFF00;
        result=0;
        state.tempOK=0;
    }
//    result = (DataRegM << 8) | (DataRegL & 0xFC);
    //result = (DataRegM << 8) | DataRegL;
    CRC = CsReg;
}
//=============================================================================================
macro ReadHum(result, CRC, comand) {

    // Configure and start the next measurement
    i2cStart();
    i2cTx(I2C_OP_WRITE | ALS_I2C_ADDR);
    i2cTx(comand);
    //------
    fwDelayUs(50000,FW_DELAY_RANGE_100_MS);  // Wait 50 ms
    //------
    i2cRepeatedStart();
    i2cTx(I2C_OP_READ | ALS_I2C_ADDR);

    U16 DataRegM;
    U16 DataRegL;
    U16 CsReg;

    i2cRxAck(DataRegM);
    i2cRxAck(DataRegL);
    i2cRxNack(CsReg);

    i2cStop();
    //------
    U16 CRCok;
    HTU21_CheckCrc(DataRegM, DataRegL, CsReg, CRCok);
    if(CRCok == 0) {
        result = (DataRegM << 8) | (DataRegL & 0xFC);
        state.humOK=1;

    } else {
        //result=0xFF00;
        result=0;
        state.humOK=0;
    }
//    result = (DataRegM << 8) | (DataRegL & 0xFC);
    //result = (DataRegM << 8) | DataRegL;
    CRC = CsReg;
}
//=============================================================================================
macro ReadUserReg() {
   i2cDeviceReadReg8(ALS_I2C_ADDR, READ_REG; output.UserRegContent);
   input.ReadRequest=0;
}
//=============================================================================================
macro WriteUserReg() {
   i2cDeviceWriteReg8(ALS_I2C_ADDR, WRITE_REG, cfg.UserRegData);
   input.WriteRequest=0;
}
//=============================================================================================
macro SoftReset() {
    //------
    i2cStart();
    i2cTx(I2C_OP_WRITE | ALS_I2C_ADDR);
    i2cTx(SOFT_RESET);
    //------
    i2cStop();
    //------
    input.ResetRequest=0;
}
//=============================================================================================
    if(input.ResetRequest==1) {
            SoftReset();
            ReadUserReg();
    } else {
            //-------
            if(input.WriteRequest==1) {
                WriteUserReg();
                ReadUserReg();

            } else {
                if(input.ReadRequest==1) {
                   ReadUserReg();
                }
                ReadTemp(output.tmp, output.tmpCRC,TEMP_MEASUR_NO_HOLD );
                ReadHum(output.hum, output.humCRC, HUM_MEASUR_NO_HOLD);
            }



             //ReadParam(output.tmp, output.tmpCRC,TEMP_MEASUR_NO_HOLD );
             //ReadParam(output.hum, output.humCRC, HUM_MEASUR_NO_HOLD);

  //          ReadTemp(output.tmp, output.tmpCRC,TEMP_MEASUR_NO_HOLD );
  //          ReadHum(output.hum, output.humCRC, HUM_MEASUR_NO_HOLD);


         //   i2cDeviceWriteReg8(ALS_I2C_ADDR, WRITE_REG, cfg.UserRegData);
        //    i2cDeviceReadReg8(ALS_I2C_ADDR, READ_REG; output.UserRegContent);
            //-------
     }

//----------------------------------------------------------------------------------------------
// Schedule the next execution
fwScheduleTask(1);
//----------------------------------------------------------------------------------------------
// Notify the application
fwGenAlertInterrupt();
//----------------------------------------------------------------------------------------------]]></sccode>
        <sccode name="initialize" init_power_mode="0"><![CDATA[// Schedule the first execution
fwScheduleTask(1);]]></sccode>
        <sccode name="terminate" init_power_mode="0"><![CDATA[]]></sccode>
        <event_trigger active_count="1">0,1,2,3</event_trigger>
        <tt_iter>run_execute,wait_1s</tt_iter>
        <tt_struct>state.i2cStatus</tt_struct>
        <rtl_struct></rtl_struct>
        <rtl_task_sel en="1" struct_log_list="output"/>
    </task>
</project>
